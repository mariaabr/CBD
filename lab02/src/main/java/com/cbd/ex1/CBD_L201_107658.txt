# CBD – Lab201 – Rafaela Abrunhosa

## Iniciar MongoDB

comandos para iniciar o mongodb:
    sudo systemctl start mongod
    sudo systemctl status mongod
    mongosh

## O que é MongoDB?

O mongodb é uma base de dados orientado a documentos projetado para facilitar o desenvolvimento e dimensionamento de aplicações.
Oferece alto desempenho, alta disponibilidade e fácil escalabilidade trabalhando no conceito de coleção.
Este pode ser executado em ambientes como mongodb Atlas, Enterprise e Community.
O mongodb permite, assim, gerir dados, armazenar e consultá-los, transformá-los em agregações,
garantir segurança no acesso aos mesmos e implementar e dimensionar a base de dados.
Um único servidor mongodb tem múltiplas bases de dados.
<br>

### Coleção

Uma coleção é um conjunto de documentos mongodb e é o equivalente a uma tabela RDMBS. Existem numa única base de dados e não impõem um schema. Os documentos de uma coleção pode, ainda, ter diferentes campos endo que todos os documentos de uma coleção têm finalidades semelhantes ou relacionadas.

### Documento

Um documento é um conjunto de pares key-value e possuem um dynamic schema não precisando de ter o mesmo conjunto de campos ou estrutura e os campos comuns nos documentos de uma coleção podem conter diferentes tipos de dados.
<br>

**Relação entre a terminologia RDBMS com mongodb:**
| RDMS | MongoDB |
| ---- | ------- |
| Database | Database |
| Table | Collection |
| Tuple/Row | Document |
| column | Field |
| Table Join | Embedded Documents |
| Primary Key | Primary Key (Default key _id provided by MongoDB itself) |

<br>

## Vantagens do MongoDB

### Em relação a RDBMS

- Schema less -> uma coleção tem documentos diferentes sendo que o número de campo, o conteúdo e o tamanho do documento podem variar entre eles.
- A estrutura de um objeto único é clara.
- Sem joins complexos.
- Capacidade de consulta profunda, oferece suporte a consultas dinâmicas em documentos usando uma linguagem de consulta baseada em documentos que é quase tão poderosa quanto o SQL.
- Tuning
- Facilidade de expansão -> é fácil de escalar.
- A conversão/mapeamento de objetos de aplicação em objetos da base de dados não é necessária.
- Utiliza memória interna para armazenar o trabalho (windowed), permitindo um acesso mais rápido aos dados.

### Porque usar o MongoDB?

- Document Oriented Storage -> os dados são armazenados na forma de documentos no estilo JSON.
- Index em qualquer atributo.
- Replicação e alta disponibilidade.
- Auto-Sharding -> Fragmentação automática
- Consultas avançadas.
- Atualizações rápidas no local.
- Suporte profissional do MongoDB

### Onde usar o MongoDB?

- Grandes dados.
- Gestão e entrega de conteúdo.
- Infrastrutura Móvel e Social.
- Gestão de dados do utilizador.
- Centro de dados.

## Data Model Design

Existem dois tipos de modelos de dados: Embedded data model e Normalized data model.

### Embedded data model

Neste modelo, pode-se ter todos os dados relacionados num só documento (modelo de dados desnormalizado).

Supondo que queremos obter os detalhes de empregados em 3 documentos diferentes, nomeadamente Personal_details, Contact e Address, é possível incorporar estes 3 documentos num único só:

    {
        _id: ,
        Emp_ID: "10025AE336"
        Personal_details:{
            First_Name: "Radhika",
            Last_Name: "Sharma",
            Date_Of_Birth: "1995-09-26"
        },
        Contact: {
            e-mail: "radhika_sharma.123@gmail.com",
            phone: "9848022338"
        },
        Address: {
            city: "Hyderabad",
            Area: "Madapur",
            State: "Telangana"
        }
    }

### Normalized data model

Com este modelo é possível consultar os subdocumentos do documento original, utilizando referências.

**Employee:**

    {
        _id: <ObjectId101>,
        Emp_ID: "10025AE336"
    }

**Personal_details:**

    {
        _id: <ObjectId102>,
        empDocID: " ObjectId101",
        First_Name: "Radhika",
        Last_Name: "Sharma",
        Date_Of_Birth: "1995-09-26"
    }

**Contact:**

    {
        _id: <ObjectId103>,
        empDocID: " ObjectId101",
        e-mail: "radhika_sharma.123@gmail.com",
        phone: "9848022338"
    }

**Address:**

    {
        _id: <ObjectId104>,
        empDocID: " ObjectId101",
        city: "Hyderabad",
        Area: "Madapur",
        State: "Telangana"
    }

## Criar um base de dados

Para usar uma base de dados usa-mos:
    test> use firstdatabase
e recebemos como resposta:
    switched to db firstdatabase
    firstdatabase>

Verificar a base de dados selecionada:
    > db
    firstdatabase

Para verificar a lista de bases de dados devemos executar o comando **show dbs**:

    > show dbs
    admin   40.00 KiB
    config  60.00 KiB
    local   72.00 KiB

Como se pode observar, a base de dados criada não se encontra listada uma vez que é necessário inserir pelo menos um documento:

    firstdatabase> db.movie.insert({"name":"tutorials point"})
    {
    acknowledged: true,
    insertedIds: { '0': ObjectId("6527cec35c55421809e6abbd") }
    }
    firstdatabase> show dbs
    admin          40.00 KiB
    config         92.00 KiB
    firstdatabase  40.00 KiB
    local          72.00 KiB
    firstdatabase>

## Drop de uma base de dados

    firstdatabase> db.dropDatabase()
    { ok: 1, dropped: 'firstdatabase' }

E para confirmar listamos as bases de dados:
    firstdatabase> show dbs
    admin   40.00 KiB
    config  60.00 KiB
    local   40.00 KiB

## Criar uma coleção

db.createCollection(name, options)

Neste comando, o name é o nome da coleção a ser criada e o parâmetro options é um documento e é usado para especificar a configuração da coleção (é opcional). Existem, ainda, outros campos opcionais.

**criação de uma coleção sem options:**

    > db.createCollection("firstcollection")
    { ok: 1 }

**verificar a coleção criada:**

    > show collections
    firstcollection

**criação de uma coleção com algumas options importantes:**

    db.createCollection("mycol", { capped : true, autoIndexID : true, size : 6142800, max : 10000 } ){
    "ok" : 0,
    "errmsg" : "BSON field 'create.autoIndexID' is an unknown field.",
    "code" : 40415,
    "codeName" : "Location40415"
    }

No MongoDB uma coleção é criada automaticamente quando lhe é inserida algum documento.
    > db.tutorialspoint.insertOne({"name" : "tutorialspoint"})
    {
    acknowledged: true,
    insertedId: ObjectId("652848e2a4888ff3060a6ded")
    }
    > show collections
    firstcollection
    tutorialspoint

## Drop de uma coleção

    > db.tutorialspoint.drop()
    true
    > show collections
    first collection

## Tipos de dados

- String -> tipo usado mais comum para guardar os dados
- Integer -> guarda um valor numérico (32 ou 64 bit)
- Boolean -> valores true ou false
- Double -> guarda valores decimais
- Min/Max keys -> compara um valor com o mais baixo e mais alto dos elementos BSON
- Arrays -> guarda arrays, listas ou valores múltiplos numa key
- Timestamp -> ctimestamp, pode guardar quando é que um documento foi alterado ou adicionado
- Object -> usado para documentos integrados (embedded)
- Null -> guarda um valor null
- Symbol -> é idêntico a uma string mas é reservado para linguages que usam um tipo de símbolo específico
- Date -> guarda a data do momento ou o tempo em formato UNIX time, é possível criar a própria data criando uma objeto do tipo Date e passando o dia, o mês e o ano
- Object ID -> guarda o ID do documento
- Binary data -> guarda dados binários
- Code -> guarda código JavaScript num documento
- Regular expression -> guarda uma expressão regular

## Inserir um documento

Para inserir um documento usa-se os métodos **insert()** ou **save()**:

### Sintaxe:
    >db.COLLECTION_NAME.insert(document)

### Exemplo:
    > db.users.insert({ _id : ObjectId("507f191e810c19729de860ea"), title: "Movies Overview", description: "os filmes são bons no sofá", by: "filsons", tags: ['filme', 'mantinha', 'grinch'], likes: 24 })

    {
        acknowledged: true,new HashMap<>();
        insertedIds: { '0': ObjectId("507f191e810c19729de860ea") }
    }

Para inserir apenas um documento numa coleção é melhor utilizar o método **insertOne()**.

    > db.moviesDetails.insertOne({ Name: "Grinch", Year: "2018", Dobrador_Grinch: "António Raminhos", Best_quote: "Oh, filhoses!"})
    
    {
    acknowledged: true,
    insertedId: ObjectId("6528523d7c1d80499708dbb9")
    }

Para inserir vários documentos deve-se utilizar o método **insertMany()**, sendo necessário passar-lhe um array de documentos.

    > db.empDetails.insertMany(
    ... 	[
    ... 		{
    ... 			First_Name: "Radhika",
    ... 			Last_Name: "Sharma",
    ... 			Date_Of_Birth: "1995-09-26",
    ... 			e_mail: "radhika_sharma.123@gmail.com",
    ... 			phone: "9000012345"
    ... 		},
    ... 		{
    ... 			First_Name: "Rachel",
    ... 			Last_Name: "Christopher",
    ... 			Date_Of_Birth: "1990-02-16",
    ... 			e_mail: "Rachel_Christopher.123@gmail.com",
    ... 			phone: "9000054321"
    ... 		},
    ... 		{
    ... 			First_Name: "Fathima",
    ... 			Last_Name: "Sheik",
    ... 			Date_Of_Birth: "1990-02-16",
    ... 			e_mail: "Fathima_Sheik.123@gmail.com",
    ... 			phone: "9000054321"
    ... 		}
    ... 	]
    ... )

    {
        acknowledged: true,
        insertedIds: {
            '0': ObjectId("652852dc7c1d80499708dbba"),
            '1': ObjectId("652852dc7c1d80499708dbbb"),
            '2': ObjectId("652852dc7c1d80499708dbbc")
        }
    }

## Consultar um documento

Para consultar dados de uma coleção do MongoDB é necessário usar o método **find()**.

    > db.mycol.find()
    [
    {
        _id: ObjectId("6528610b26a5642154cb9de7"),
        title: 'MongoDB Overview',
        description: 'MongoDB is no SQL database',
        by: 'tutorials point',
        url: 'http://www.tutorialspoint.com',
        tags: [ 'mongodb', 'database', 'NoSQL' ],
        likes: 100
    },
    {
        _id: ObjectId("6528610b26a5642154cb9de8"),
        title: 'NoSQL Database',
        description: "NoSQL database doesn't have tables",
        by: 'tutorials point',
        url: 'http://www.tutorialspoint.com',
        tags: [ 'mongodb', 'database', 'NoSQL' ],
        likes: 20,
        comments: [
        {
            user: 'user1',
            message: 'My first comment',
            dateCreated: ISODate("2013-12-10T02:35:00.000Z"),
            like: 0
        }
        ]
    }
    ]

O método **pretty()** permite formatar os resultados.
O método **findOne()** retorna um documento apenas.

    > db.mycol.findOne({title: "MongoDB Overview"})
    {
    _id: ObjectId("6528610b26a5642154cb9de7"),
    title: 'MongoDB Overview',
    description: 'MongoDB is no SQL database',
    by: 'tutorials point',
    url: 'http://www.tutorialspoint.com',
    tags: [ 'mongodb', 'database', 'NoSQL' ],
    likes: 100
    }

## RDBMS Where Clause Equivalents in MongoDB

| Operation | Syntax | Example | RDBMS Equivalent |
| --------- | ------ | ------- | ---------------- |
| Equality 	| {<key>:{$eg;<value>}} | db.mycol.find({"by":"tutorials point"}).pretty() | where by = 'tutorials point' |
| Less Than |	{<key>:{$lt:<value>}} |	db.mycol.find({"likes":{$lt:50}}).pretty() | where likes < 50 |
| Less Than Equals |	{<key>:{$lte:<value>}} | db.mycol.find({"likes":{$lte:50}}).pretty() | where likes <= 50 |
| Greater Than |	{<key>:{$gt:<value>}} |	db.mycol.find({"likes":{$gt:50}}).pretty() | where likes > 50 |
| Greater Than Equals |	{<key>:{$gte:<value>}} | db.mycol.find({"likes":{$gte:50}}).pretty() | where likes >= 50 |
| Not Equals |	{<key>:{$ne:<value>}} |	db.mycol.find({"likes":{$ne:50}}).pretty() | where likes != 50 |
| Values in an array |	{<key>:{$in:[<value1>, <value2>,……<valueN>]}} |	db.mycol.find({"name":{$in:["Raj", "Ram", "Raghu"]}}).pretty() | where name matches any of the value in :["Raj", "Ram", "Raghu"] |
| Values not in an array |	{<key>:{$nin:<value>}} |	db.mycol.find({"name":{$nin:["Ramu", "Raghav"]}}).pretty() | where name values is not in the array :["Ramu", "Raghav"] or, doesn’t exist at all |

## AND no MongoDB

Tem de se usar a keyword $and:

    > db.mycol.find({$and:[{"by":"tutorials point"},{"title": "MongoDB Overview"}]}).pretty()
    [
    {
        _id: ObjectId("6528610b26a5642154cb9de7"),
        title: 'MongoDB Overview',
        description: 'MongoDB is no SQL database',
        by: 'tutorials point',
        url: 'http://www.tutorialspoint.com',
        tags: [ 'mongodb', 'database', 'NoSQL' ],
        likes: 100
    }
    ]

Representa:
    **where by = 'tutorials point' AND title = 'MongoDB Overview'**

## OR no MongoDB

Tem de se usar a keyword $or:

    > db.mycol.find({$or:[{"by":"tutorials point"},{"title": "MongoDB Overview"}]}).pretty()
    [
    {
        _id: ObjectId("6528610b26a5642154cb9de7"),
        title: 'MongoDB Overview',
        description: 'MongoDB is no SQL database',
        by: 'tutorials point',
        url: 'http://www.tutorialspoint.com',
        tags: [ 'mongodb', 'database', 'NoSQL' ],
        likes: 100
    },
    {
        _id: ObjectId("6528610b26a5642154cb9de8"),
        title: 'NoSQL Database',
        description: "NoSQL database doesn't have tables",
        by: 'tutorials point',
        url: 'http://www.tutorialspoint.com',
        tags: [ 'mongodb', 'database', 'NoSQL' ],
        likes: 20,
        comments: [
        {
            user: 'user1',
            message: 'My first comment',
            dateCreated: ISODate("2013-12-10T02:35:00.000Z"),
            like: 0
        }
        ]
    }
    ]

Representa:
    **where by = 'tutorials point' OR title = 'MongoDB Overview'**

## AND e OR juntos no MongoDB

    > db.mycol.find({"likes": {$gt:10}, $or: [{"by": "tutorials point"}, {"title": "MongoDB Overview"}]}).pretty()
    [
    {
        _id: ObjectId("6528610b26a5642154cb9de7"),
        title: 'MongoDB Overview',
        description: 'MongoDB is no SQL database',
        by: 'tutorials point',
        url: 'http://www.tutorialspoint.com',
        tags: [ 'mongodb', 'database', 'NoSQL' ],
        likes: 100
    },
    {
        _id: ObjectId("6528610b26a5642154cb9de8"),
        title: 'NoSQL Database',
        description: "NoSQL database doesn't have tables",
        by: 'tutorials point',
        url: 'http://www.tutorialspoint.com',
        tags: [ 'mongodb', 'database', 'NoSQL' ],
        likes: 20,
        comments: [
        {
            user: 'user1',
            message: 'My first comment',
            dateCreated: ISODate("2013-12-10T02:35:00.000Z"),
            like: 0
        }
        ]
    }
    ]

Representa:
    **'where likes>10 AND (by = 'tutorials point' OR title = 'MongoDB Overview')'**

## NOR no MongoDB

A consulta de documentos baseada na condição **not** faz uso da keyword $not:
    >db.COLLECTION_NAME.find(
        {
            $not: [
                {key1: value1}, {key2:value2}
            ]
        }
    )

Neste exemplo procuramos empregados onde o primeiro nome não é "Radhika" e o último nome não é "Christopher", desta forma, usamos a keyword $nor.

    > db.empDetails.find( { $nor: [ {"First_Name": "Radhika"}, {"Last_Name": "Christopher"} ]}).pretty()
    [
    {
        _id: ObjectId("652852dc7c1d80499708dbbc"),
        First_Name: 'Fathima',
        Last_Name: 'Sheik',
        Date_Of_Birth: '1990-02-16',
        e_mail: 'Fathima_Sheik.123@gmail.com',
        phone: '9000054321'
    },
    {
        _id: ObjectId("65286c1f26a5642154cb9deb"),
        First_Name: 'Fathima',
        Last_Name: 'Sheik',
        Age: '24',
        e_mail: 'Fathima_Sheik.123@gmail.com',
        phone: '9000054321'
    }
    ]

## NOT no MongoDB

Tem de se usar a keyword $not:

    > db.empDetails.find( { "Age": { $not: { $gt: "25" } } } )
    [
    {
        _id: ObjectId("652852dc7c1d80499708dbba"),
        First_Name: 'Radhika',
        Last_Name: 'Sharma',
        Date_Of_Birth: '1995-09-26',
        e_mail: 'radhika_sharma.123@gmail.com',
        phone: '9000012345'
    },
    {
        _id: ObjectId("652852dc7c1d80499708dbbb"),
        First_Name: 'Rachel',
        Last_Name: 'Christopher',
        Date_Of_Birth: '1990-02-16',
        e_mail: 'Rachel_Christopher.123@gmail.com',
        phone: '9000054321'
    },
    {
        _id: ObjectId("652852dc7c1d80499708dbbc"),
        First_Name: 'Fathima',
        Last_Name: 'Sheik',
        Date_Of_Birth: '1990-02-16',
        e_mail: 'Fathima_Sheik.123@gmail.com',
        phone: '9000054321'
    },
    {
        _id: ObjectId("65286c1f26a5642154cb9deb"),
        First_Name: 'Fathima',
        Last_Name: 'Sheik',
        Age: '24',
        e_mail: 'Fathima_Sheik.123@gmail.com',
        phone: '9000054321'
    }
    ]

## Update de um documento

Os métodos **update()** e **save()** são utilizados para dar update de um documento num coleção.
Enquando que o método **update()** dá update dos valores existentes no documento, o método **save()** subtitui o documento existente pelo documento passado no método **save()**.

### Método update()

    > db.mycol.update({'title':'MongoDB Overview'},{$set:{'title':'New MongoDB Tutorial'}})

    {
        acknowledged: true,
        insertedId: null,
        matchedCount: 1,
        modifiedCount: 1,
        upsertedCount: 0
    }

    > db.mycol.find()
    [
    {
        _id: ObjectId("6528610b26a5642154cb9de7"),
        title: 'New MongoDB Tutorial',
        description: 'MongoDB is no SQL database',
        by: 'tutorials point',
        url: 'http://www.tutorialspoint.com',
        tags: [ 'mongodb', 'database', 'NoSQL' ],
        likes: 100
    },
    {
        _id: ObjectId("6528610b26a5642154cb9de8"),
        title: 'NoSQL Database',
        description: "NoSQL database doesn't have tables",
        by: 'tutorials point',
        url: 'http://www.tutorialspoint.com',
        tags: [ 'mongodb', 'database', 'NoSQL' ],
        likes: 20,
        comments: [
        {
            user: 'user1',
            message: 'My first comment',
            dateCreated: ISODate("2013-12-10T02:35:00.000Z"),
            like: 0
        }
        ]
    }
    ]

Neste exemplo, o antigo título "MongoDB Overview" é definido para o novo título "New MongoDB Tutorial".
Por defeito o MongoDB dá update a um único elemento. Para dar update a múltiplos updates é necessário adicionar o parâmetro 'multi' e defini-lo como true:

    > db.mycol.update({'title':'MongoDB Overview'},
   {$set:{'title':'New MongoDB Tutorial'}},{multi:true})

### Método save()

    >db.mycol.save(
    {
        "_id" : ObjectId("507f191e810c19729de860ea"), 
            "title":"Tutorials Point New Topic",
        "by":"Tutorials Point"
    }
    )

As versões mais recentes de MongoDB foram desconsiderando este método.

### Método findOneAndUpdate()

    > db.empDetails.findOneAndUpdate( { First_Name: 'Radhika' }, { $set: { Age: '30', e_mail: 'radhika_newemail@gmail.com' } } )

    {
    _id: ObjectId("652852dc7c1d80499708dbba"),
    First_Name: 'Radhika',
    Last_Name: 'Sharma',
    Date_Of_Birth: '1995-09-26',
    e_mail: 'radhika_newemail@gmail.com',
    phone: '9000012345',
    Age: '30'
    }

Este método dá update dos valores num documento existente.

### Método updateOne()

    db.empDetails.updateOne(
        {First_Name: 'Radhika'},
        { $set: { Age: '30',e_mail: 'radhika_newemail@gmail.com'}})

    {
    acknowledged: true,
    insertedId: null,
    matchedCount: 1,
    modifiedCount: 0,
    upsertedCount: 0
    }


Dá update a um único documento que corresponde ao filtro dado.

### Método updateMany()

    > db.empDetails.updateMany(
        {Age:{ $gt: "25" }},
        { $set: { Age: '00'}})

    {
    acknowledged: true,
    insertedId: null,
    matchedCount: 5,
    modifiedCount: 5,
    upsertedCount: 0
    }

Dá update a todos os documentos que satisfazem o filtro dado.

## Eliminar um documento

### Método remove()

Este método é usado para remover um documento de uma coleção e aceita dois parâmetros:
    - deletion criteria -> os critérios de exclusão ed acordo com os documentos serão removidos (opcional)
    - justOne -> se estiver definido como true ou 1 remove apenas um documento (opcional)

    > db.newcol.find()
    [
    {
        _id: ObjectId("652873084a53621093f620ec"),
        title: 'MongoDB Overview'
    },
    {
        _id: ObjectId("652873084a53621093f620ed"),
        title: 'NoSQL Overview'
    },
    {
        _id: ObjectId("652873084a53621093f620ee"),
        title: 'Tutorials Point Overview'
    }
    ]

    > db.newcol.remove({'title':'MongoDB Overview'})
    
    { acknowledged: true, deletedCount: 1 }
    
    > db.newcol.find()
    [
    {
        _id: ObjectId("652873084a53621093f620ed"),
        title: 'NoSQL Overview'
    },
    {
        _id: ObjectId("652873084a53621093f620ee"),
        title: 'Tutorials Point Overview'
    }
    ]

Foram demovidos os elementos cujo título fosse 'MongoDB Overview'.

### Remover apenas um elemento

No caso de se querer remover apenas o primeiro elemento é necessário definir o parâmetro **justOne** no método **remove()**.

    > db.newcol.remove(DELETION_CRITERIA,1)

### Remover todos os documentos

    Se não se especificar os deletion criteria o MongoDB vai remover todos os documentos da coleção.

    > db.newcol.remove({})
    { acknowledged: true, deletedCount: 2 }

    > db.newcol.find()
    >

## Projeção

Fazer uma projeção significa selecionar apenas os dados necessários em vez de se selecionarem todos os dados do documento, pode-se selecionar os campos pretendidos.

### Método find()

Este método aceita um segundo parâmetro opcional que é uma lista de campos que se pretende ir buscar. 

    > db.mycol.find({},{"title":1,_id:0})
    [ { title: 'New MongoDB Tutorial' }, { title: 'NoSQL Database' } ]

## Limitar Registos

Para limitar registos no MongoDB tem de se usar o método **limit()**, este aceita um argumento que representa o número de documentos que se pretende exibir.

    > db.mycol.find({},{"title":1,_id:0}).limit(1)
    [ { title: 'New MongoDB Tutorial' } ]

Se o argumento não for especificado no método **limit()** são exibidos todos os documentos.

### Método skip()

O método **skip()** também aceita um argumento que representa o número de documentos a serem passados à frente.

    > db.mycol.find({},{"title":1,_id:0}).limit(1).skip(1)
    [ { title: 'NoSQL Database' } ]

O valor default é 0 para este método.

## Ordenar (sorting) Registos

Existem vezes em que é útil ordenar os documentos e para isso recorre-se ao método **sort()**.

### Método sort()

Este método aceita um documento contendo uma lista de campos juntamente com a sua ordem.
A ordem é especificada pelos valores 1 e -1. O valor 1 representa a ordem ascendente e o valor -1 representa a ordem descendente.

    > db.mycol.find({},{"title":1,_id:0}).sort({"title":-1})
    [ { title: 'NoSQL Database' }, { title: 'New MongoDB Tutorial' } ]

## Indexing

Os índices tornam as consultas mais eficientes. Sem índices seria necessário verificar todos os documentos de uma coleção para selecionar os que correspondessem à instrução da consulta.

Os índices são estruturas de dados especiais que armazenam uma pequena parte do conjunto de dados num formato mais fácil de percorrer. O índice armazena o valor de um campo específico ou conjunto de campos, ordenado pelo valor do campo conforme o especificado no índice.

### Método createIndex()

Serve para criar um índice:

    > db.mycol.createIndex({"title":1})
    title_1

O valor -1 pode ser usado para criar um índice na ordem descendente.
É possível passar múltiplos campos para serem criados índices nos mesmos:

    > db.mycol.createIndex({"title":1,"description":-1})
    title_1_description_-1

### Método dropIndex()

    > db.mycol.dropIndex({"title":1})
    { nIndexesWas: 3, ok: 1 }

### Método dropIndexes()

    > db.mycol.dropIndexes({"title":1,"description":-1})
    { nIndexesWas: 2, ok: 1 }

### Método getIndexes()

Este método retorna a descrição de todos os índices da coleção.

    > db.mycol.getIndexes()
    [
    { v: 2, key: { _id: 1 }, name: '_id_' },
    {
        v: 2,
        key: { title: 1, description: -1 },
        name: 'title_1_description_-1'
    }
    ]

## Agregação

As operações de agregação processam registos de dados e retornam resultados computados. Estas operações agrupam valores de vários documentos e podem executar diversas operações nos dados agrupados para retornar um único resultado.

### Método aggregate()

No seguinte exemplo, vamos exibir uma lista a informar quantos tutoriais foram escritos por que utilizador:

    > db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$sum : 1}}}])
    [ { _id: null, num_tutorial: 2 } ]

Representa:
    **select by_user, count(*) from mycol group by by_user**

### Lista de expressões de agregação disponíveis

| Expression | Description | Example |
| ---------- | ----------- | ------- |
| $sum | Sums up the defined value from all documents in the collection. | db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$sum : "$likes"}}}]) |
| $avg | Calculates the average of all given values from all documents in the collection. | db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$avg : "$likes"}}}]) |
| $min | Gets the minimum of the corresponding values from all documents in the collection. | db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$min : "$likes"}}}]) |
| $max | Gets the maximum of the corresponding values from all documents in the collection. | db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$max : "$likes"}}}]) |
| $push | Inserts the value to an array in the resulting document. | db.mycol.aggregate([{$group : {_id : "$by_user", url : {$push: "$url"}}}]) |
| $addToSet | Inserts the value to an array in the resulting document but does not create duplicates. | db.mycol.aggregate([{$group : {_id : "$by_user", url : {$addToSet : "$url"}}}]) |
| $first | Gets the first document from the source documents according to the grouping. Typically this makes only sense together with some previously applied “$sort”-stage. | db.mycol.aggregate([{$group : {_id : "$by_user", first_url : {$first : "$url"}}}]) |
| $last | Gets the last document from the source documents according to the grouping. Typically this makes only sense together with some previously applied “$sort”-stage. | db.mycol.aggregate([{$group : {_id : "$by_user", last_url : {$last : "$url"}}}]) |